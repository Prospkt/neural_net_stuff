# codigo para ser usado no google collab - cada duplo espaco e um espaco no collab

#escolhendo as bibliotecas do collab
from pandas import read_csv
from sklearn.model_selection import train_test_split  # para treino
from tensorflow.keras import Sequential   # porque e forward
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt


#importando o arquivo 
dados = read_csv('/content/derramamento de Oleo.csv', sep=",")   # importando - clicar na pastinha que fica do lado - joga la - depois copia caminho ( botao direito) --- obs alguns sao sep=";"
dados     # opcional para vizualizar os dados - tambem te fala o numero de colunas - nesse caso 24


#Settando o x e y 
X = dados.values[:,0:49]  # deve conter as caracteristicas 
y = dados.values[:,49]   # deve conter a respota
y  # opcional para ver se o y esta certo


# Geracao dos arquivos de treino, teste e validacao
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)


# Geracao do modelo 
model = Sequential()
model.add(Dense(100, activation= 'tanh', kernel_initializer= 'he_normal', input_shape=(49,)))   #  porque sao 50 colunas -1 = 49
model.add(Dense(80, activation = 'relu'))  #numero 80 abritavel para sua necessidade - como tambem essa camada do meio pode ser mais 
model.add(Dense(1, activation= 'sigmoid'))  #apenas uma saida para o modelo de classificao


# Compilacao do modelo 
model.compile(optimizer='adam', loss='binary_crossentropy', metrics= ['accuracy'])  # adam e a funcao mais comum atualmente para rede neural


# Momento da verdade, ou seja de treino 
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=32, verbose=1) # se na tabela de treinamento mostrar loss: nan quer dizer que esta errado 
# epochs quantidade de vezes, bach - de quanto e quanto te traz um resultado, verbose - te mostra um resultado 



#GRAFICO1 - plot loss durante treinamento
plt.subplot(211)
plt.title('Grafico de Custo')
plt.plot(history.history['loss'], label= 'Perdas durante os Treinamentos')
plt.plot(history.history['val_loss'], label= 'Perdas durante os Testes')
plt.xlabel('Epocas')
plt.ylabel('Perdas')
plt.legend


#GRAFICO2 - plot accuracy durante treinamento
plt.subplot(212)
plt.title('Grafico de Desempenho')
plt.plot(history.history['accuracy'], label= 'Acuracia durante os Testes')
plt.plot(history.history['val_accuracy'], label= 'Acuracia durante os Testes')
plt.xlabel('Epocas')
plt.ylabel('Acuracia')
plt.legend



#THE END

#O QUE FAZER PARA MELHORAR?
# OBS - alterar os numeros nas devidas linhas acima e nao depois 

#Mexer nos neuronios 
model.add(Dense(80, activation = 'relu'))  #colocar por exemplo 250 em vez de 80 - (MAIS EFETIVO QUE EPOCHS)

#Mexer na epochs
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=32, verbose=1) # MUDAR PARA 300 em vez de 50


